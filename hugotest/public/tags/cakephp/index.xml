<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cakephp on Dieter&#39;s blog</title>
    <link>http://localhost:1313/tags/cakephp/</link>
    <description>Recent content in Cakephp on Dieter&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Jan 2009 22:16:52 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/cakephp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CakePHP and a paradigm shift to a code generation based approach?</title>
      <link>http://localhost:1313/post/cakephp_and_a_paradigm_shift_to_a_code_generation_based_approach/</link>
      <pubDate>Mon, 19 Jan 2009 22:16:52 -0400</pubDate>
      
      <guid>http://localhost:1313/post/cakephp_and_a_paradigm_shift_to_a_code_generation_based_approach/</guid>
      <description>&lt;p&gt;At my &lt;a href=&#34;http://localhost:1313/jobhunt_over&#34;&gt;new job&lt;/a&gt;, I&#39;m writing a quite full-featured web application.&lt;br /&gt;

I&#39;ve choosen to use CakePHP.&lt;br /&gt;

Why? Well, it may be 2 years since I last used it, but I&#39;ve followed the project and it&#39;s planet, and it seems to have matured and gained even more monumentum.&lt;br /&gt;

I want to use something that is widely used so there is plenty of stuff available for it, it&#39;s RAD, it&#39;s flexible and powerful.&lt;br /&gt;

I noticed things such as CLI support and documentation have improved tremendously too.&lt;/p&gt;

&lt;p&gt;However, I find that still, the recommended (or at least &#34;most commonly used&#34;) practices are not as efficient as they could be, and that emphasis is placed on the wrong aspects.&lt;br /&gt;

See, even though the &lt;a href=&#34;http://book.cakephp.org/view/113/Code-Generation-with-Bake&#34;&gt;bake&lt;/a&gt; tool has come a long way since I last used it, it&#39;s still used to &#34;generate some standard models/controllers/views&#34; and the developer can take it from there [further editing the resulting files himself].&lt;br /&gt;

Finetuning generated code by editing the templates (in fact, only views have templates; the php code of models and controllers is hardcoded in the scripts that generate them), is still an obscure practice...&lt;br /&gt;

Also, there are very few commandline switches (Right now you can choose your app dir, whether you want to bake a model,controller or view, and it&#39;s name.)&lt;br /&gt;

All other things (validation rules, associatons, index/view/edit/add actions/views, which components, overwrite yes/no etc) are all handled interactively.&lt;br /&gt;

There are also some smaller enoyances such as when you specify one option like the name of the model, it assumes you don&#39;t want interactivity and produces a model containing nothing more then the class definition and the membervariable $name, which is usually worthless.&lt;br /&gt;

One thing that is pretty neat though, If you update $this-&gt;recursive in a model, the baked views will contain stuff for the associated things.  But so much more could be done...&lt;br /&gt;

&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Ideallistically speaking, the bake tool (and it libraries) should imho become much more advanced:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;templates for views, models and controllers.&lt;/li&gt;

&lt;li&gt;choice of multiple (groups of) templates which you can choose with a commandline argument. (eg I typically have some different kinds of M/V/C&#39;s for a certain model, but there are many similarities and they can often even be categorised into groups.)&lt;/li&gt;

&lt;li&gt;the ability to control all aspects of the bake process through commandline switches (or config files).  Both the things that are asked now but also $recursive level, behaviors you want to use for models, etc.&lt;/li&gt;

&lt;li&gt;proper cmdline arg parsing (getline or something)&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;We could then do a paradigm shift to actually treat your models, views and controllers as uncritical &#34;output&#34; code which can be deterministically regenerated (and hence doesn&#39;t need to be versionned), while the templates and the scripts to call bake become your &#34;source&#34;, and your key asset to building the application you&#39;re working on.&lt;/p&gt;

&lt;p&gt;If I had the time (or would use cake for personal projects) I would happily work on such refactorings in a clean way.&lt;br /&gt;

For now though,  I&#39;ve hacked/workarounded/patched the cake code in such a way that it behaves the way I want, while spending as little time on it as possible.&lt;br /&gt;

For those interested, the patched code is online at &lt;a href=&#34;http://github.com/Dieterbe/cake/tree/master&#34; title=&#34;http://github.com/Dieterbe/cake/tree/master&#34;&gt;http://github.com/Dieterbe/cake/tree/master&lt;/a&gt;&lt;br /&gt;

The first rev is the original cakephp code, so you can look at the diffs if you want.&lt;/p&gt;

&lt;p&gt;Changes until now ( &lt;a href=&#34;http://github.com/Dieterbe/cake/commit/9ceb6234164ebc750c8b697a825834ca36097ce7&#34; title=&#34;http://github.com/Dieterbe/cake/commit/9ceb6234164ebc750c8b697a825834ca36097ce7&#34;&gt;http://github.com/Dieterbe/cake/commit/9ceb6234164ebc750c8b697a825834ca3...&lt;/a&gt; ):&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;Do not clear my terminal. (why is that needed anyway :/)&lt;/li&gt;

&lt;li&gt;Some echo&#39;s that tell me which shells are loaded, tasks executed etc (to understand more how it all works)&lt;/li&gt;

&lt;li&gt;always overwrite files.  Hey I use version control!  always bake unit tests, always bake all actions/views, except those for admin routing&lt;/li&gt;

&lt;li&gt;never ask me which db to connect to, never use scaffolding, don&#39;t use helpers, don&#39;t write $useDbConfig to models (it&#39;s loaded dynamically in app_model),&lt;/li&gt;

&lt;li&gt;agree with all associations except the hasOne&#39;s (I can build in exceptions/specific rules if I ever need them)&lt;/li&gt;

&lt;li&gt;validation rules are specified as sql comments.  I don&#39;t want to re-answer those questions each time I rebake.&lt;/li&gt;

&lt;/ul&gt;

See this example sql file.  When baking a model, the code will first try to find a specific rule for the model, if not found, it will look for a global rule, and if still not found, ask the question interactively.&lt;br /&gt;

[code lang=&#34;sql&#34;]&lt;br /&gt;

-- cake validate ALL id none&lt;br /&gt;

-- cake validate ALL created none&lt;br /&gt;

-- cake validate ALL modified none&lt;br /&gt;

(...)&lt;br /&gt;

CREATE TABLE foos (&lt;br /&gt;

    id serial NOT NULL,&lt;br /&gt;

    name character varying(255) NOT NULL, --cake validate apc alphanumeric&lt;br /&gt;

    type character varying(255) NOT NULL, --cake validate apc notempty&lt;br /&gt;

    room_id integer NOT NULL, --cake validate apc numeric&lt;br /&gt;

    created timestamp without time zone,&lt;br /&gt;

    modified timestamp without time zone&lt;br /&gt;

);&lt;br /&gt;

[/code]

&lt;/ul&gt;

&lt;p&gt;Here is the bash code which I currently use to bake all my models without any interactivity:&lt;/p&gt;

&lt;p&gt;[code lang=&#34;bash&#34;]&lt;br /&gt;

for i in `cake bake model &lt;&lt;&lt; &#39;q&#39; | awk &#39;/^[[:digit:]]/ {print $2}&#39;` #get a list of all models&lt;br /&gt;

do&lt;br /&gt;

        if [ $i != Aro ] &amp;amp;&amp; [ $i != Aco ] &amp;amp;&amp; [ $i != ArosAco ]&lt;br /&gt;

        then&lt;br /&gt;

                echo &#34;&gt;&gt;&gt; doing $i....&#34;&lt;br /&gt;

                cake bake model $i&lt;br /&gt;

        fi&lt;br /&gt;

done&lt;br /&gt;

[/code]&lt;/p&gt;

&lt;p&gt;I may post later again about this stuff if I have something useful to say.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bye CakePHP, bye dAuth... Hello Drupal!</title>
      <link>http://localhost:1313/post/bye_cakephp_bye_dauth_hello_drupal/</link>
      <pubDate>Thu, 19 Jul 2007 00:34:51 -0400</pubDate>
      
      <guid>http://localhost:1313/post/bye_cakephp_bye_dauth_hello_drupal/</guid>
      <description>&lt;p&gt;I&#39;m afraid the time has come to say goodbye to CakePHP, and to the projects I&#39;ve been working on for it.&lt;br /&gt;

I still like Cake ... In fact, the further development of 1.2 goes the more I like it (well, generally spoken that is ... because there are some minor things I don&#39;t like but that&#39;s not important now).  The truth of the matter is I like to develop, I like the php language and I enjoy working with Cake.&lt;br /&gt;

But .. all the sites I currently work on are all community sites or blogs&lt;!--more--&gt;, and although some of them have some specific requirements, in the end it&#39;s all very generic and a full blown content management system like Drupal proves much more useful and feature full then developing my own application in a web application framework such as Cake. (even if that&#39;s becoming easier and easier to do)&lt;/p&gt;

&lt;p&gt;I think Drupal is a magnificent CMS because it is plug and play (I need that because my time is getting pretty sparse lately!) but also because it has a pretty active community: there are so many 3rd party modules being developed, and usually you can just upload the module in your modules folder , enable it from your control panel and presto!&lt;/p&gt;

&lt;p&gt;Also Drupal seems to have a pretty slick API, this is important for me because I will still need to program some stuff every once in a while because not everything I need is available yet. &lt;/p&gt;

&lt;p&gt;If I would ever use Cake again, I would probably abuse it as a console application framework (especially for it&#39;s simple datalayer), or of course if I would have to create a very customized web application such as I did &lt;a href=&#34;http://localhost:1313/masterproef&#34;&gt;recently&lt;/a&gt;, but none is planned in the forseeable future.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A special note about dAuth:&lt;/em&gt;&lt;br /&gt;

CakePHP 1.2 will have an auth component included, I don&#39;t know the current state but as far as I know it&#39;s not (and never will be, judging my talks with a cake dev) as advanced as dAuth.  However, this is not necessarily a bad thing:&lt;br /&gt;

The further I&#39;ve tried to perfect the safeguarding of the confidentiality of the password (trough hashing it, using the challenge response paradigm, etc) the more I&#39;ve come to realize you can never get a perfect result on plain http using js/php.  Just switch to https and you get great encryption where you don&#39;t need to bother about the confidentiality of a password, and it&#39;s almost no hassle.  So these are things that shouldn&#39;t be in your php/js code, which saves you a lot of efforts and is perfectly secure (at least: the aspect of confidentiality!&lt;/p&gt;

&lt;p&gt;But.. another part of the system were the &#34;added bits&#34; of security such as the brute force detection.  I hope the cake guys will include something like that in their auth component because I think this is a must.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>dAuth</title>
      <link>http://localhost:1313/post/dauth/</link>
      <pubDate>Mon, 02 Jul 2007 13:19:14 -0400</pubDate>
      
      <guid>http://localhost:1313/post/dauth/</guid>
      <description>&lt;p&gt;dAuth is a secure authentication system for CakePHP.&lt;/p&gt;

&lt;p&gt;It uses techniques such as the challenge-response paradigm, customizable multiple-stage password hashing, brute force (hammering) detection, session hijacking prevention etc.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bakery.cakephp.org/articles/view/introduction-to-dauth-v0-3&#34; onClick=&#34;javascript:urchinTracker(&#39;bakery.cakephp.org/articles/view/introduction-to-dauth-v0-3&#39;);&#34;&gt;Read all about it&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can download the files separately on the before mentioned page or get the &lt;a href=&#34;http://letthemcodecake.com/learning-cakephp/dauth-v03-tarball/&#34; onClick=&#34;javascript:urchinTracker(&#39;letthemcodecake.com/learning-cakephp/dauth-v03-tarball/&#39;);&#34;&gt;tarball&lt;/a&gt; that somebody was kind enough to create.&lt;br /&gt;

(damn I&#39;m lazy today)&lt;/p&gt;

&lt;p&gt;I don&#39;t maintain this any more!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting statistics about events that don&#39;t trigger page requests with Google Analytics</title>
      <link>http://localhost:1313/post/getting_statistics_about_events_that_dont_trigger_page_requests_with_google_analytics/</link>
      <pubDate>Sun, 24 Jun 2007 19:27:42 -0400</pubDate>
      
      <guid>http://localhost:1313/post/getting_statistics_about_events_that_dont_trigger_page_requests_with_google_analytics/</guid>
      <description>&lt;p&gt;You probably already heard of &lt;a href=&#34;www.google.com/analytics&#34;&gt;Google Analytics&lt;/a&gt;.  It&#39;s a pretty nice program that (&lt;em&gt;basically&lt;/em&gt;) gathers data about visits of your site and creates reports of it.  It works by including some JavaScript code on your page, so that each page request triggers a call to the Analytics tracker sending along some data such as which page is requested and which resolution was used. (no personal or other privacy-sensitive data is sent).  But here is the deal!  I just discovered that you can also track &lt;a href=&#34;http://www.google.com/support/googleanalytics/bin/answer.py?answer=55597&amp;amp;topic=11012&#34;&gt;events that don&#39;t require page requests!&lt;/a&gt;&lt;br /&gt;

Think of links to files or to external locations, JavaScript events (Ajax anyone?) or even Flash events (but who is crazy enough to use Flash anyway?).&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;The principle is very easy: similar to normal page loads which trigger a call of the JavaScript function &lt;em&gt;urchinTracker()&lt;/em&gt; you just add &lt;em&gt;onClick=&#34;javascript:urchinTracker(&#39;/this-is-something-i-want-to-track&#39;);&#34;&lt;/em&gt; to your hyperlink.&lt;br /&gt;

You can even work with subdivisions.  The examples on the help pages for &lt;a href=&#34;http://www.google.com/support/googleanalytics/bin/answer.py?answer=55529&#34;&gt;download&lt;/a&gt; and &lt;a href=&#34;http://www.google.com/support/googleanalytics/bin/answer.py?answer=55527&#34;&gt;outbound&lt;/a&gt; links propose &lt;em&gt; urchinTracker(&#39;/downloads/map&#39;);&lt;/em&gt; and &lt;em&gt;&lt;br /&gt;

urchinTracker(&#39;/outgoing/example_com&#39;);&lt;/em&gt; respectively.&lt;/p&gt;

&lt;p&gt;Now we also know why Google &lt;a href=&#34;http://www.google.com/support/googleanalytics/bin/answer.py?answer=66983#0.1.1_step4&#34;&gt;says&lt;/a&gt; the &#34;normal&#34; tracking code should be put at the end of the page, right before the &lt;em&gt;&amp;lt;/body&amp;gt;&lt;/em&gt; tag.  I always wondered why they recommend this weird location.  This is because calls like the ones above should happen prior to the &#34;normal&#34; one.&lt;/p&gt;

&lt;p&gt;If only I had known this earlier.  I would love to have known an accurate number of downloads of my thesis text (and the number of unique downloaders) :-)&lt;/p&gt;

&lt;p&gt;For those who don&#39;t have Google Analytics setup yet:&lt;br /&gt;

&lt;a href=&#34;drupal.org/&#34;&gt;Drupal&lt;/a&gt; users should install the &lt;a href=&#34;http://drupal.org/node/49388&#34;&gt;Drupal Google Analytics&lt;/a&gt; module.&lt;br /&gt;

&lt;a href=&#34;www.cakephp.org/&#34;&gt;CakePHP&lt;/a&gt; users can put the &lt;a href=&#34;http://www.google.com/support/googleanalytics/bin/answer.py?answer=66983#0.1.1_step4&#34;&gt;Tracking code&lt;/a&gt; in the layout file or even in an element.&lt;/p&gt;

&lt;p&gt;Have fun tracking all events on your website!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Drag &#39;n drop tutorial with the CakePHP 1.2 Ajax helper, Prototype framework and Scriptaculous library</title>
      <link>http://localhost:1313/post/drag_n_drop_tutorial_with_cakephp_ajax_prototype_scriptaculous/</link>
      <pubDate>Tue, 29 May 2007 21:25:13 -0400</pubDate>
      
      <guid>http://localhost:1313/post/drag_n_drop_tutorial_with_cakephp_ajax_prototype_scriptaculous/</guid>
      <description>&lt;h3&gt;Introduction&lt;/h3&gt;

&lt;p&gt;During the development of my &lt;a href=&#34;http://localhost:1313/masterproef&#34;&gt;thesis&lt;/a&gt; I wanted to create a drag &#39;n drop interface.  But I never did anything like that, I never used CakePHP&#39;s Ajax helper and neither made I ever use of more advanced functionalities of Scriptaculous/Prototype.  Hell I even never touched Ajax before this! &lt;/p&gt;

&lt;p&gt;Although there are some basic CakePHP/Ajax tutorials out there, I still had a hard time because some knowledge about Ajax (in CakePHP) was assumed in all of those.  After a lot of googling I even found a tutorial called &lt;a href=&#34;http://www.dustinweber.com/blog/_archives/2007/4/4/2859177.html&#34;&gt;CakePHP: Sortable AJAX Drag &amp;amp; Drops - The Basics&lt;/a&gt;  &lt;br/&gt;&#34;Perfect!&#34; I thought, until after staring at the article for a long while and I started to notice nowhere in the article &#34;$ajax-&gt;drag&#34;, &#34;$ajax-&gt;drop&#34; or &#34;$ajax-&gt;dropRemote&#34; is used.  (those are calls on the CakePHP Ajax helper to enhance objects to become draggable, or to become a dropbox where draggables can be dropped into).  So the only more or less suited tutorial about drag &#39;n drop was actually about sorting and didn&#39;t use the drag/drop function calls at all.  Even though it contains very useful information.&lt;/p&gt;

&lt;p&gt;Long story short:  I finally got it working (thanks to Krazylegz and kristofer and possibly others too, it has been a while so I may forget someone ;-), and learned a lot in the process.  I will share what I learned with you guys so that hopefully it&#39;s a bit easier for you then what I had to go through.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3&gt;Prerequisites&lt;/h3&gt;

&lt;p&gt;CakePHP.  I used 1.2 but I think this will work on 1.1 too (because the Ajax helper is in there for a long time.  it&#39;s even fully documented in the 1.1 manual)&lt;br /&gt;

Scriptaculous &amp;amp; Protoype libraries.  See &lt;a href=&#34;http://manual.cakephp.org/chapter/helpers&#34;&gt;the cake manual&lt;/a&gt; on how to install these.  Don&#39;t close this page after installing the libs, because it also explains the possibilities of the Ajax helper and is a reference that you &lt;em&gt;will&lt;/em&gt; need!  The &lt;a href=&#34;http://api.cakephp.org/1.2/class_ajax_helper.html&#34;&gt;api reference&lt;/a&gt; reveals even more possibilities, but the former page should do.&lt;/p&gt;

&lt;h3&gt;Let&#39;s get started!&lt;/h3&gt;

&lt;p&gt;Instead of showing a really simple example, I&#39;ll give a skeleton example based on a webstore-scenario.  You can have multiple articles (draggables) and 2 droppables: a cart and a thrashbin.  Dropping an article in the cart adds the article to your order (which I usually keep in the session) and updates the view accordingly, dragging it from the cart into the thrashbin removes it from the session and updates the view too.&lt;br /&gt;

I&#39;ve left out the basics such as sql, models and controller business logic, and focused on the Ajax specifics.&lt;/p&gt;

&lt;p&gt;The view-code can be combined in different elements but for simplicity let&#39;s assume there is only 1 view file.&lt;br /&gt;

Keep in mind that each object where you want to assign some functionality to (such as draggable, droppable) must have a unique DOM id.  It doesn&#39;t matter if it&#39;s a div or span or p or whatever, as long as it has a unique id.&lt;/p&gt;

&lt;p&gt;The view looks like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;![CDATA[&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color: #19177C&#34;&gt;$articles&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$article&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #BC7A00&#34;&gt;?&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;div id=&amp;quot;&amp;lt;?php&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$article&lt;/span&gt;[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Article&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;]; &lt;span style=&#34;color: #BC7A00&#34;&gt;?&amp;gt;&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;   &amp;lt;?php&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$article&lt;/span&gt;[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Article&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;]; &lt;span style=&#34;color: #BC7A00&#34;&gt;?&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$ajax&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;drag&lt;/span&gt;(&lt;span style=&#34;color: #19177C&#34;&gt;$article&lt;/span&gt;[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Article&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;revert&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;)); &lt;span style=&#34;color: #BC7A00&#34;&gt;?&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;/*&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;   the revert thing will make the draggable return to it&amp;#39;s original position.  Set this to false and the object will stay where you put it.&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;   This does not have anything to do with a function call being made btw, that&amp;#39;s the job for the draggables&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;*/&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;endforeach&lt;/span&gt;; &lt;span style=&#34;color: #BC7A00&#34;&gt;?&amp;gt;&lt;/span&gt;





&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;div id=&amp;quot;cart&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;   &amp;lt;?php&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;requestAction&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;/controller/showcart&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color: #BC7A00&#34;&gt;?&amp;gt; // this call is not necessary.  You can use it to fill the &amp;lt;div&amp;gt; with some content to start with&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;



&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;div id=&amp;quot;thrashbin&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;



&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;?php&lt;/span&gt;

   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$ajax&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;dropRemote&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;cart&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;,&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;/controller/addarticle/&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;with&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;{draggedid:element.id}&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;update&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;cart&amp;#39;&lt;/span&gt;));

   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$ajax&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;dropRemote&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;thrashbin&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;,&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;/controller/removearticle/&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;with&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;{draggedid:element.id}&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;update&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;cart&amp;#39;&lt;/span&gt;));

&lt;span style=&#34;color: #BC7A00&#34;&gt;?&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;/*&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;   these two calls make objects with DOM id&amp;#39;s &amp;#39;cart&amp;#39; and &amp;#39;thrashbin&amp;#39; droppable.  When an object is dropped into them, the actions defined by &amp;#39;url&amp;#39; are called.&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;   The &amp;#39;with&amp;#39;=&amp;gt;&amp;#39;{draggedid:element.id} passes the id of the dropped element to the function that is called (on the background, no page refresh or anything like that!).&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;   The update thing makes sure that the entire output of the requestAction call is displayed inside the &amp;lt;div id=&amp;quot;cart&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;.&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;   So that means that the page will update the part of the page which is specified (dom id &amp;#39;cart&amp;#39;) when the output from the requestAction call is received&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;*/&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;]]&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;

The controller would have functions like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;![CDATA[&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;?php&lt;/span&gt;



&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// this function can be used to show initial contents of the cart.&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;showcart&lt;/span&gt;(){

    &lt;span style=&#34;color: #19177C&#34;&gt;$this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/* no articles bought yet */&lt;/span&gt;

    &lt;span style=&#34;color: #19177C&#34;&gt;$this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;render&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;cart&amp;#39;&lt;/span&gt;);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (read on to find out more about this view)&lt;/span&gt;

}



&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;addarticle&lt;/span&gt;(){

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/*&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;   The DOM id of the element that has been dragged into here can be found in $this-&amp;gt;params[&amp;#39;form&amp;#39;][&amp;#39;draggedid&amp;#39;].&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;   You can use that id to do something like $this-&amp;gt;Article-&amp;gt;findById() to add the article to the session.&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;   At the end of this function the entire contents of the &amp;lt;strong&amp;gt;view&amp;lt;/strong&amp;gt; file will be returned (and rendered inside the &amp;lt;div&amp;gt; with DOM id &amp;#39;cart&amp;#39;.)&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;   The layout won&amp;#39;t be rendered, only the view, since this is an Ajax call (the difference is autodetected by Cakes RequestHandler) &lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;   You could do something like this:&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;*/&lt;/span&gt;

   &lt;span style=&#34;color: #19177C&#34;&gt;$this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #19177C&#34;&gt;$all_bought_articles_from_the_session&lt;/span&gt;);

   &lt;span style=&#34;color: #19177C&#34;&gt;$this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;render&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;cart&amp;#39;&lt;/span&gt;);

}



&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// this function is similar to the one above but instead removes one article from the session and renders the same view ;-)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;removearticle&lt;/span&gt;(){

}

&lt;span style=&#34;color: #BC7A00&#34;&gt;?&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;]]&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;

The view controller/cart.ctp could look something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;![CDATA[&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color: #19177C&#34;&gt;$articles&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$artikel&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;?&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;li&amp;gt;&amp;lt;?php&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$article&lt;/span&gt;[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Article&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;]; &lt;span style=&#34;color: #BC7A00&#34;&gt;?&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;endforeach&lt;/span&gt;; &lt;span style=&#34;color: #BC7A00&#34;&gt;?&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;



&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$articles&lt;/span&gt;) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;No articles in the cart!&amp;quot;&lt;/span&gt;; &lt;span style=&#34;color: #BC7A00&#34;&gt;?&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #BC7A00&#34;&gt;]]&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;

There you have it.  All explanations are inside the sources, I hope it&#39;s clear enough.  If not, just ask :-)&lt;/p&gt;

&lt;h3&gt;Common misconceptions&lt;/h3&gt;

&lt;p&gt;From reading many (outdated?) articles about Ajax in cake I noted a lot of information that was not correct.  Here they are:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;It is &lt;em&gt;not&lt;/em&gt; necessary to explicity pass the &#39;ajax&#39; layout as an argument to the render call.  Eg you don&#39;t need to do this:  $this-&gt;render(&#39;cart&#39;, &#39;ajax&#39;);  You can do $this-&gt;render(&#39;cart&#39;); (or even no explicit render call at all, if the view file is the same as the action name of your controller) Cakes RequestHandler automatically detects when it&#39;s dealing with an ajax call, and in that case won&#39;t render the layout, only the view.&lt;/li&gt;

&lt;li&gt;It is &lt;em&gt;not&lt;/em&gt; necessary to declare the UTF-8 character encoding in your layout or view&lt;/li&gt;

&lt;li&gt;You &lt;em&gt;don&#39;t&lt;/em&gt; need $this-&gt;autoRender =false; in the controller.  Unless maybe you absolutely don&#39;t want to render anything.&lt;/li&gt;

&lt;/ul&gt;

&lt;h3&gt;The end&lt;/h3&gt;

&lt;p&gt;There you have it.  I hope everything is clear.  If not, ask on !&lt;/p&gt;

&lt;p&gt;For those who don&#39;t have it already, I really recommend &lt;a href=&#34;http://www.getfirebug.com/&#34;&gt;The firebug firefox extension&lt;/a&gt;.  Not only is it a great aid when designing, it&#39;s also perfectly suited for debugging Ajax calls.  It can show you exactly what happens when you drag an item in a droppable, what request is being made, what is being returned, etc.&lt;br /&gt;

This is explained in this movie:&lt;a href=&#34;http://www.youtube.com/watch?v=W4jXAaEMp2M&#34;&gt;Introduction to Debugging AJAX Application with Firebug&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Figuring out CakePHP&#39;s new AuthComponent</title>
      <link>http://localhost:1313/post/figuring_out_cakephp_new_authcomponent/</link>
      <pubDate>Sat, 07 Apr 2007 15:52:48 -0400</pubDate>
      
      <guid>http://localhost:1313/post/figuring_out_cakephp_new_authcomponent/</guid>
      <description>&lt;p&gt;In the Cake community, there has always been much interest in authentication/authorization systems.  The issue of authentication has been addressed in several add-ons provided by the community, such as &lt;a href=&#34;http://bakery.cakephp.org/articles/view/147&#34;&gt;DAuth&lt;/a&gt; (written by me), &lt;a href=&#34;http://bakery.cakephp.org/articles/view/99&#34;&gt;OthAuth&lt;/a&gt; (written by &lt;a href=&#34;http://www.devmoz.com/blog&#34;&gt;Crazylegs&lt;/a&gt;) and &lt;a href=&#34;http://bakery.cakephp.org/tags/view/auth&#34;&gt;many others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, one of the additions to the 1.2 branch which is currently in active development , is a built-in auth module.  A module that isn&#39;t finished yet but it sure is worth it looking at.  (In fact I&#39;m thinking about making a new dAuth version built on cake&#39;s own auth system.).  As most bakers know, there is very little information about the 1.2 branch in general, and the auth component in specific.  So what I will try to do, is delve in the code, mess with it, and explain my findings in this post.  &lt;!--more--&gt; For this first post it will be more trying to decipher the source code, messing with it will probably for a little later on.&lt;br /&gt;

Disclaimer: not everything I&#39;ll say here will be correct, first of all because I&#39;m not able to fully understand every piece of the source code (yet), secondly because the 1.2 api is still changing.&lt;/p&gt;

&lt;p&gt;The version i use for this post is svn head. (revision 4758 at time of writing)&lt;/p&gt;

&lt;h3&gt;The header&lt;/h3&gt;

&lt;p&gt;So let&#39;s just open &lt;a href=&#34;http://api.cakephp.org/1.2/auth_8php-source.html&#34;&gt;cake/libs/controller/components/auth.php&lt;/a&gt;.&lt;br /&gt;

Reading the first comment we immediately see &#34;Manages user logins and permissions.&#34;  This looks very important to me.  Seems like this component handles both authentication and access control.  It seems like the AuthComponent is able to interact with  the &lt;a href=&#34;http://manual.cakephp.org/chapter/acl&#34;&gt;ACL&lt;/a&gt; system that we know from the 1.1 branch.  Multiple uses of the AclComponent ($this-&gt;Acl inside the component) confirm this.&lt;/p&gt;

&lt;h3&gt;Member variables&lt;/h3&gt;

&lt;p&gt;The AuthComponent has quite some member variables, the most important ones seem to me:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;strong&gt;$userModel&lt;/strong&gt; (aro&#39;s) &amp;amp; &lt;strong&gt;$objectModel&lt;/strong&gt; (aco&#39;s)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;$loginAction&lt;/strong&gt;:  url for login action, null by default but we should set this (to something like &#39;users/login&#39;) when we want to use the component in our application. As usual AppController&#39;s beforeFilter() seems like a good place for that.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;$validate&lt;/strong&gt;:  set to &#39;actions&#39; or &#39;objects&#39;, depending on what you want to check the access for.  Actually there are more options, read on.  However: on first sight it seems like combinations of objects-actions aren&#39;t possible...Anyone knows more about this?&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;$_loggedIn&lt;/strong&gt;:  true/false&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;$allowedActions&lt;/strong&gt;: no user validation on these actions&lt;/li&gt;

&lt;/ul&gt;

&lt;h3&gt;Functions&lt;/h3&gt;

&lt;p&gt;Now, let&#39;s move on to the available functions (the most important ones that is) ...&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;

&lt;strong&gt;initialize(&amp;amp;$controller)&lt;/strong&gt; seems to be a new ( in 1.2) callback.&lt;br /&gt;

Dispatcher calls $controller-&gt;_initComponents(), which (controller.php) in turn calls $component-&gt;init($this), which calls $tempComponent-&gt;initialize($controller).&lt;br /&gt;

So this function is called automatically, and when that happens $controller-&gt;params are all copied to $this-&gt;params (by value).  Some more stuff happens but I don&#39;t think it&#39;s very important at this time.&lt;/li&gt;

&lt;li&gt;The &lt;strong&gt;startup(&amp;amp;$controller)&lt;/strong&gt; callback is familiar to 1.1 users.  It is called in the startup-phase of the component, shortly after the initialize callback.  What happens here?

&lt;ul&gt;

&lt;li&gt;The password in $controller-&gt;data is hashed by using a call to &#34;Security::hash(CAKE_SESSION_STRING . $password)&#34;. (called via $this-&gt;hashPasswords() which calls $this-&gt;password().&lt;br /&gt;

After that $this-&gt;data = $controller-&gt;data;&lt;/li&gt;

&lt;li&gt;A check whether ($this-&gt;allowedActions == array(&#39;*&#39;) || in_array($controller-&gt;action, $this-&gt;allowedActions)).&lt;br /&gt;

In this case no further processing is needed: access is granted, i don&#39;t know why we return false here, though&lt;/li&gt;

&lt;li&gt;Then we have 2 cases:&lt;br /&gt;

Either we are at the login action (defined by $loginAction like mentioned earlier), or we are somewhere else.  I think it will be clear what happens when you study the code, but I do think it&#39;s important to mention that the actual login happens at line 274 ($this-&gt;login($data), function definition at 470).&lt;br /&gt;

The identify function at line 624 is important too.  I guess this one checks the credentials.&lt;br /&gt;

If we are somewhere else then $loginAction, access is checked at line 293 (function isAuthorized(), function definition at 332.&lt;br /&gt;

Inside this function, $validate is assigned to $type, so it seems like not only &#39;actions&#39; and &#39;objects&#39; are valid values, but also &#39;association&#39; and &#39;controller&#39;.  I don&#39;t really get why this is made so complicated (the __authType() step for example.).&lt;/li&gt;

&lt;/ul&gt;

&lt;/li&gt;

&lt;li&gt;Another callback new in 1.2 is &lt;strong&gt;shutdown(&amp;amp;$controller)&lt;/strong&gt;.  Unlike initialize, this one is mentioned on &lt;a href=&#34;http://cake.insertdesignhere.com/posts/view/17&#34;&gt;Nate&#39;s blog&lt;/a&gt;.  It removes &#39;Auth.redirect&#39; from the session when the user is logged in.&lt;/li&gt;

&lt;/ul&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This was only a slight introduction, more research (and thus explanations) will happen later on and you can also expect some sample code.  Give me some time though ;-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fosdem 2007 review</title>
      <link>http://localhost:1313/post/fosdem_2007_review/</link>
      <pubDate>Thu, 15 Mar 2007 21:02:41 -0400</pubDate>
      
      <guid>http://localhost:1313/post/fosdem_2007_review/</guid>
      <description>&lt;p&gt;Every year, during a special weekend in February, the &lt;a href=&#34;http://www.ulb.ac.be/&#34;&gt;University Libre of Brussels&lt;/a&gt; suddenly becomes a little more geeky.&lt;br /&gt;

It&#39;s that time of the year when many European (and some inter-continental) colleagues join us at&lt;br /&gt;

&lt;a href=&#34;http://www.fosdem.org&#34;&gt;Fosdem: the Free and Open source Software Developers&#39; European Meeting&lt;/a&gt; (more info &lt;a href=&#34;http://www.fosdem.org/about/fosdem&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a href=&#34;http://www.fosdem.org/2007/&#34;&gt;This years edition&lt;/a&gt; took place in the weekend of 24 - 2 - 2007.  And I was there, for the first time.  Saturday and Sunday :-)&lt;/p&gt;

&lt;p&gt;Like usual the &lt;a href=&#34;http://www.fosdem.org/2007/schedule/days&#34;&gt;schedule&lt;/a&gt; was pretty full, with lots of things happening at the same time, and only one thing a human being is able to attend at the same time.  Luckily however the 2 biggest rooms (Janson and Chavanne) were videotaped and the &lt;a href=&#34;http://www.fosdem.org/2007/media/video&#34;&gt;videos&lt;/a&gt; are always made available online afterwards.  So knowing that, I could safely follow other rooms if I found those more interesting.&lt;/p&gt;

&lt;h3&gt;Saturday&lt;/h3&gt;

&lt;p&gt;The first talk started at 10:00h, and it&#39;s about an hour drive, if you don&#39;t get lost.&lt;br /&gt;

But I need my sleep, especially the sparse kind of sleep after Friday evenings.  (same goes for my buddy &lt;a href=&#34;http://ghosty.be/&#34;&gt;Geert&lt;/a&gt; who I could ride along with).  We headed off at 11h, and arrived somewhere around 12:30.  (Let&#39;s blame Brussels&#39; bad road signaling for that).  &lt;/p&gt;

&lt;p&gt;Missed the opening talks, and the &#34;status of software patents&#34; and &#34;liberating java&#34; talks which I&#39;m was really interested in, but hey they were taped so no problemo ;-). During lunch break I explored the stands a bit, talked with some guys and picked up some reading material.&lt;/p&gt;

&lt;p&gt;At the &lt;a href=&#34;http://www.gentoo.org/&#34;&gt;Gentoo&lt;/a&gt; stand there was no merchandise to be found.  I asked whether merch would arrive, but they said they were afraid not.  (and they were right).  No Gentoo merchandise, that was bummer.  I really wanted a t-shirt or something like that.  Gentoo is one of my favorite distros.&lt;/p&gt;

&lt;p&gt;At the gnome stand they had made a panel were people could write their favorite things (or things they hate) about gnome on post-its.  There were things like &#34;gnome should use QT&#34; replied by &#34;qt should use gtk&#34; and all kinds of jokes.  Then there was this guy who was repositioning all the post-it&#39;s in the shape of letters of kde.  I use neither (I use &lt;a href=&#34;http://www.xfce.org/&#34;&gt;xfce&lt;/a&gt;) but this sure was a cool place to hang out during breaks.  &lt;/p&gt;

&lt;p&gt;After that I followed the &lt;a href=&#34;http://www.fosdem.org/2007/schedule/events/xorg&#34;&gt;X.org talk&lt;/a&gt;, &lt;a href=&#34;http://www.fosdem.org/2007/schedule/speakers/keith+packard&#34;&gt;Keith&lt;/a&gt; (the project leader) was a real-funpants and told us all about the developers involved with Xorg.  Where they live, their tasks, favorite beers, and so on.  More of a talk for the community then the developers.&lt;/p&gt;

&lt;p&gt;Next was &lt;a href=&#34;http://www.fosdem.org/2007/schedule/events/aiglx&#34;&gt;the aiglx one&lt;/a&gt;.  Actually I preferred attending &lt;a href=&#34;http://www.fosdem.org/2007/schedule/events/linuxbios&#34;&gt;linuxBIOS&lt;/a&gt; which I just find more interesting.  Besides, thanks to my nvidia card i can run GLX_EXT_texture_from_pixmap without aiglx or xgl, but hey, I guess the other guys are less fortunate so I decided to stick with them.  I can always check linuxBIOS later :-).   This talk was pretty advanced.  A real developers-talk you could say.  I certainly couldn&#39;t follow ;-)&lt;/p&gt;

&lt;p&gt;After that came a talk about the state of &lt;a href=&#34;http://www.fosdem.org/2007/schedule/events/linux_kernel&#34;&gt; the Linux kernel&lt;/a&gt;.  It was quite interesting, again, this was a talk aimed at developers, which I&#39;m totally not, but I&#39;m a bit familiar with the kernel (running &lt;a href=&#34;http://www.gentoo.org/&#34;&gt;Gentoo&lt;/a&gt; and following &lt;a href=&#34;http://kerneltrap.org/&#34;&gt;kerneltrap&lt;/a&gt; a bit has it advantages) so I could follow, more or less.&lt;/p&gt;

&lt;p&gt;Next I followed &lt;a href=&#34;http://www.fosdem.org/2007/schedule/events/donators_return&#34;&gt;the donators return&lt;/a&gt; thing where people who donated (like me) can &lt;a href=&#34;http://fosdem.org/2007/support/donate&#34;&gt;win prizes&lt;/a&gt;.  I didn&#39;t win anything but hey, still I felt the money was well spent.  (and I also got a free t-shirt ;-) )  One of &lt;a href=&#34;http://www.sun.com/desktop/workstation/ultra20/&#34;&gt;these&lt;/a&gt; would certainly fit in my room though ;-))&lt;/p&gt;

&lt;p&gt;One thing I just had to attend was the Gentoo devroom.  like I said: Gentoo is one of my favorite distributions.  Also, it was our Belgian irc-friend &lt;a href=&#34;http://www.fosdem.org/2007/schedule/speakers/dimitry+bradt&#34;&gt;Dimitry (aka diox)&lt;/a&gt; who gave his talk so I just couldn&#39;t miss &lt;a href=&#34;http://www.fosdem.org/2007/schedule/events/gentoo_future_discussion&#34;&gt;his talk about Gentoo&#39;s future&lt;/a&gt;.  This was the first devroom I followed and it was totally different then any other talk: it was more of an interactive talk between the devs and the audience.  In the audience were some real devs, but also lot&#39;s of &#34;normal&#34; communitypeople.  Next to me there even was a guy who was very new to Gentoo.  I was happy to tell him all about paludis, overlays and other concepts and terms of Gentoo.&lt;/p&gt;

&lt;p&gt;After that, there were no more talks to attend, so I went by some stands again (to check if Gentoo merchandise might have arised, among others), met Geert again and, although it was pretty hard to find our way back in the (now darkened) city of Brussels, we managed to drive back home.&lt;/p&gt;

&lt;h3&gt;Sunday&lt;/h3&gt;

&lt;p&gt;A new day, and wow, so many cool talks to attend: metasploit, drupal, security testing, mozilla, mono, gplv3, the list goes on.  Luckily many of them were in Janson/Chavanne so I could safely skip these and head for...&lt;/p&gt;

&lt;p&gt;the Gentoo devroom.  (yeah, sorry, Gentoo here Gentoo there.  My other favorite distro &lt;a href=&#34;http://www.archlinux.org/&#34;&gt;Arch Linux&lt;/a&gt; wasn&#39;t featured anywhere, so Gentoo got all the attention)&lt;br /&gt;

I missed the &#34;programing with paludis&#34; one (ouch! I would have liked that one) but I was there to hear &lt;a href=&#34;http://www.fosdem.org/2007/schedule/speakers/mike+frysinger&#34;&gt;Mike&lt;/a&gt; talk about &lt;a href=&#34;http://www.fosdem.org/2007/schedule/events/gentoo_council&#34;&gt;Gentoo&#39;s inner workings&lt;/a&gt;.  He told us all about Gentoo&#39;s history and how (by who) the project is managed.  That Daniel (the founder of Gentoo) left and came back (I found it remarkable he didn&#39;t mention &lt;em&gt;why&lt;/em&gt; he left (to work at Microsoft).    Guess that wasn&#39;t important enough for the community)&lt;/p&gt;

&lt;p&gt;After that &lt;a href=&#34;http://www.fosdem.org/2007/schedule/speakers/chris+gianelloni&#34;&gt;Chris&lt;/a&gt; talked about &lt;a href=&#34;http://www.fosdem.org/2007/schedule/events/gentoo_tinderbox_testing&#34;&gt;the process that happens for making releases&lt;/a&gt;.  I was impressed.&lt;/p&gt;

&lt;p&gt;To fill the gap between 13h and 14h I wanted to follow &lt;a href=&#34;http://www.fosdem.org/2007/schedule/events/jabber_oneteam&#34;&gt;this&lt;/a&gt; talk.  I have no idea what oneteam is, but I like jabber.  The room was stuffed with people though, and when opening the door you literally felt warm air coming out, so I decided to let the jabber guys in their oven :-)&lt;/p&gt;

&lt;p&gt;After that some more Gentoo talks: &lt;a href=&#34;http://www.fosdem.org/2007/schedule/events/gentoo_community_distro&#34;&gt;&#34;what makes Gentoo a community based distribution&#34;&lt;/a&gt; by &lt;a href=&#34;http://www.fosdem.org/2007/schedule/speakers/christel+dahlksjaer&#34;&gt;Christel&lt;/a&gt; didn&#39;t make me believe Gentoo is any more community based then most other open source Linux distributions, but hey Christel was quite a joker and the community vibe in the room was nice.&lt;/p&gt;

&lt;p&gt;After that &lt;a href=&#34;http://www.fosdem.org/2007/schedule/speakers/marius+mauch&#34;&gt;Marius&lt;/a&gt; did a &lt;em&gt;great&lt;/em&gt; job explaining the ins and outs of portage -especially the new ones- in his talk &lt;a href=&#34;http://www.fosdem.org/2007/schedule/events/gentoo_portage&#34;&gt;Portage: a look under the surface&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After that &lt;a href=&#34;http://www.fosdem.org/2007/schedule/speakers/alexander+faeroey&#34;&gt;Alexander&lt;/a&gt; did a talk called &lt;a href=&#34;http://www.fosdem.org/2007/schedule/events/gentoo_bugday&#34;&gt;future of the bugday project&lt;/a&gt;.  This was pretty much the kind of information you get by reading the forums/newsletters.  Nothing new, but I don&#39;t think the talk intended to make groundbreaking revelations either ;-)&lt;/p&gt;

&lt;p&gt;17 &#39;o clock.  Damn.. time went fast.. Fosdem pretty much coming to end, luckily there was another nice topic I was really interested in: &lt;a href=&#34;http://www.fosdem.org/2007/schedule/events/embedded_security_devices&#34;&gt;Linux on embedded security devices&lt;/a&gt;.  This talk wasn&#39;t very good though:   No kernel revelations.  No open source code.  No in-depth explanations.&lt;br /&gt;

Basically a company showing it&#39;s product: an embedded device running Linux, running customized code and a presentation showing a scheme showing where they used technologies like SSL, dns or dhcp.  Boring...  And a little demo.&lt;br /&gt;

Nice to see, but nothing more then that.&lt;/p&gt;

&lt;p&gt;I think it must have been after this talk I went back to the stands to find &lt;a href=&#34;http://christophe.vandeplas.com/&#34;&gt;Christophe (aka chri)&lt;/a&gt;, who I hadn&#39;t met yet but I had helped him a bit getting &lt;a href=&#34;http://code.google.com/p/weids/&#34;&gt;weids, the &#34;Webbased Information Display System&#34;&lt;/a&gt; (which was created for fosdem) to work.&lt;br /&gt;

After talking some time with chri the &lt;a href=&#34;http://www.fsfeurope.org/&#34;&gt;Free Software Foundation: Europe&lt;/a&gt; got my attention, and I couldn&#39;t resist buying one of their lovely t-shirts.  I can&#39;t remember how much it cost me, but it was pretty expensive.  No problem though, as I know the money is in very good hands.&lt;/p&gt;

&lt;p&gt;After that me and Geert drunk a beer, and then drove home again.&lt;/p&gt;

&lt;p&gt;Fosdem was good.&lt;/p&gt;

&lt;h2&gt;Did you know...?&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;I invited the &lt;a href=&#34;http://www.cakephp.org/&#34;&gt;CakePHP&lt;/a&gt; guys to come?  Unfortunately none of them came, but maybe I can convince them next year!&lt;/li&gt;

&lt;li&gt;The catering was allright and very, very cheap (and also run by volunteers)&lt;/li&gt;

&lt;li&gt;Fosdem is mentioned in this &lt;a href=&#34;http://www.gentoo.org/news/en/gwn/20070305-newsletter.xml&#34;&gt;Gentoo newsletter&lt;/a&gt;.  Including a picture of all the devs, shot by SeJo (sunday afternoon iirc)&lt;/li&gt;

&lt;li&gt;You&#39;ll find many pictures &lt;a href=&#34;http://www.fosdem.org/2007/media/pictures&#34;&gt;here&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Most of the talks are aimed at developers, and developers certainly are the guys that should come.  Fosdem is the perfect place to meet, discuss (with both developers of your own team, as with devs of other projects that you depend on), learn and hack some code together.&lt;/p&gt;

&lt;p&gt;For the community it&#39;s another story.  Many of the talks are too hard to follow, and those talks that are aimed at the community usually don&#39;t offer more information then what you would find on the websites, forums/mailinglists or newsletters.&lt;br /&gt;

The fact that you can download lots of video material is great.  If you stay home you can still make up for it by watching the movies.&lt;br /&gt;

It&#39;s cool to meet people though.  And if you want to visit stands of different projects (for example to buy merchandise).  That&#39;s imho the best reason for non-developers to come to fosdem.  But that&#39;s personal of course.&lt;/p&gt;

&lt;p&gt;So who&#39;s coming with me to fosdem 2008? :-).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello world!</title>
      <link>http://localhost:1313/post/blogpost1_hello_world/</link>
      <pubDate>Sun, 04 Mar 2007 14:45:36 -0400</pubDate>
      
      <guid>http://localhost:1313/post/blogpost1_hello_world/</guid>
      <description>&lt;p&gt;Finally, my own website...&lt;br /&gt;

I already wanted to get this up for a long time.  My initial idea was writing (and styling) it all from scratch using the marvelous &lt;a href=&#34;http://www.cakephp.org&#34;&gt;CakePHP&lt;/a&gt; framework along with an authentication system i wrote, &lt;a href=&#34;http://bakery.cakephp.org/articles/view/147&#34;&gt;dAuth&lt;/a&gt;.&lt;br /&gt;

However, due to my lack of time I decided to use the excellent &lt;a href=&#34;http://www.drupal.org&#34;&gt;drupal&lt;/a&gt; platform, of which I&#39;m quite sure will get the job done equally well, while drastically liberating my time, so I can invest it in other projects :-)&lt;br /&gt;

&lt;a href=&#34;http://buytaert.net/&#34;&gt;Dries Buytaert&lt;/a&gt;&#39;s talk on &lt;a href=&#34;http://www.fosdem.org/2007/&#34;&gt;fosdem&lt;/a&gt; this year really helped on making that decision ;-)&lt;/p&gt;

&lt;p&gt;So, what will this site be about?&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;me&lt;/li&gt;

&lt;li&gt;my interests

&lt;ul&gt;

&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/FOSS&#34;&gt;Free &amp;amp; Opensource software&lt;/a&gt;, and the thoughts/ideals behind it&lt;/li&gt;

&lt;li&gt;PHP scripting/programming (I like C(++), bash and j2se too but I&#39;m not as good at it as I am at php)&lt;/li&gt;

&lt;li&gt;Audio recording/mixing/production&lt;/li&gt;

&lt;li&gt;Drumming, one of my greatest hobbies&lt;/li&gt;

&lt;li&gt;Music, bands, movies,... I like&lt;/li&gt;

&lt;li&gt;productivity (&lt;a href=&#34;http://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;TDD&lt;/a&gt;, automation scripts, shell/DE tweaks, ...)

&lt;li&gt;ethics and philosophy, these aspects are really important in my life&lt;/li&gt;

&lt;li&gt;&lt;a href=&#34;http://www.jhsjatoo.org/&#34;&gt;Jeugdhuis SjaTOo&lt;/a&gt;, our local youth club&lt;/li&gt;

&lt;/ul&gt;

&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Now let&#39;s get started ;-)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>