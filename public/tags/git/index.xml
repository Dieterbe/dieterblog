<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on Dieter&#39;s blog</title>
    <link>http://localhost:1313/tags/git/</link>
    <description>Recent content in git on Dieter&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Nov 2016 11:33:03 +0200</lastBuildDate><atom:link href="http://localhost:1313/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Restoring accidental git force push overwrite on GitHub if you don&#39;t have the needed commits locally</title>
      <link>http://localhost:1313/posts/restoring-accidental-git-force-push-overwrite-on-github-if-dont-have-needed-commits-locally/</link>
      <pubDate>Mon, 14 Nov 2016 11:33:03 +0200</pubDate>
      
      <guid>http://localhost:1313/posts/restoring-accidental-git-force-push-overwrite-on-github-if-dont-have-needed-commits-locally/</guid>
      
      <description>I like cleaning git history, in feature branches, at least. The goal is a set of logical commits without other cruft, that can be cleanly merged into master. This can be easily achieved with git rebase and force pushing to the feature branch on GitHub.
Today I had a little accident and found myself in this situation:
I accidentally ran git push origin -f instead of my usual git push origin -f branchname or git push origin -f HEAD This meant that I not only overwrote the branch I wanted to update, but also by accident a feature branch (called httpRefactor in this case) to which a colleague had been force pushing various improvements which I did not have on my computer.</description>
      
    </item>
    
    <item>
      <title>Why rewriting git history? And why should commits be in imperative present tense?</title>
      <link>http://localhost:1313/posts/why-rewriting-git-history-and-why-commits-imperative-present-tense/</link>
      <pubDate>Sat, 05 Mar 2011 18:27:35 -0400</pubDate>
      
      <guid>http://localhost:1313/posts/why-rewriting-git-history-and-why-commits-imperative-present-tense/</guid>
      
      <description>&lt;p&gt;
There are tons of articles describing &lt;em&gt;how&lt;/em&gt; you can rewrite history with git, but they do not answer &#34;&lt;em&gt;why&lt;/em&gt; should I do it?&#34;.
A similar question is &#34;what are the tradeoffs / how do I apply this in my distributed workflow?&#34;.
&lt;br/&gt;Also, git developers strongly encourage/command you to write commit message in imperative present tense, but do not say why.  So, why?
&lt;br/&gt;I&#39;ll try to answer these to the best of my abilities, largely based on how I see things.  I won&#39;t get too detailed (there are enough manuals and tutorials for the exact concepts and commands).
</description>
      
    </item>
    
    <item>
      <title>Checking if a git clone has any unique content, git/svn scripts</title>
      <link>http://localhost:1313/posts/checking_if_a_git_clone_has_any_unique_content__git_and_svn_scripts/</link>
      <pubDate>Thu, 16 Dec 2010 18:06:23 -0400</pubDate>
      
      <guid>http://localhost:1313/posts/checking_if_a_git_clone_has_any_unique_content__git_and_svn_scripts/</guid>
      
      <description>&lt;p&gt;When cleaning up a system and going over git repositories I often wonder if a git repo contains any interesting, but unpushed work. (i.e. &#34;unique&#34; content)&lt;br /&gt;
I heard bzr (or was it hg...) can do it out-of-the-box, but I couldn&#39;t find any existing solution for git.&lt;br /&gt;
So I wrote a script to do this.  It checks a repo for unique commits, tags, branches, dirty files/index, added files, or stashed states.  In comparison to a specific remote, or all of them, and uses an appropriate exitcode.&lt;br /&gt;
&lt;a href=&#34;https://github.com/Dieterbe/git-scripts/blob/master/git-remote-in-sync.sh&#34;&gt;git-remote-in-sync.sh&lt;/a&gt;&lt;br /&gt;
The script is part of a bigger &lt;a href=&#34;https://github.com/Dieterbe/git-scripts/&#34;&gt;git-scripts&lt;/a&gt; repo (most of the scripts written by random people).  Although the original repo creator hasn&#39;t gotten back to me this seems like a good starting point to have some sense of order in the wildspread of git scripts.&lt;/p&gt;
&lt;p&gt;Here are some other scripts I find pretty useful:</description>
      
    </item>
    
    <item>
      <title>Handling a remote rename/move with Git</title>
      <link>http://localhost:1313/posts/handling_a_remote_rename_or_move_with_git/</link>
      <pubDate>Mon, 17 Nov 2008 11:29:36 -0400</pubDate>
      
      <guid>http://localhost:1313/posts/handling_a_remote_rename_or_move_with_git/</guid>
      
      <description>I recently had to rename a repo on my Github account. Github has made this very easy but it&#39;s just one side of the issue. Obviously you must also update any references to this remote in other clones, otherwise pushes, fetches etc won&#39;t work anymore.
You can do this in two ways:
open .git/config and modify the url for the remote manually git remote rm origin &amp;amp;&amp;amp; git remote add origin git@github.</description>
      
    </item>
    
  </channel>
</rss>
